#include <Arduino.h>
#include <ESP32SPISlave.h>
#include "Wire.h"

#define I2C_DEV_ADDR 0x55
#define pot 34

// Arreglo de pines de los LEDs
const int ledPins[] = {13, 12, 14}; // LED1 en pin 13, LED2 en pin 12, LED3 en pin 14

#define QUEUE_SIZE 1

ESP32SPISlave slave;

// Buffers para SPI
static constexpr size_t BUFFER_SIZE = 12;
uint8_t tx_buf[BUFFER_SIZE]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
uint8_t rx_buf[BUFFER_SIZE]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

void onRequest();
void onReceive(int numBytes);
void processCommand(const char* cmd);
String bufferToStr(uint8_t*, int);

void setup() {
    pinMode(pot, INPUT);
    
    // Configura los pines de los LEDs
    for (int i = 0; i < 3; i++) {
        pinMode(ledPins[i], OUTPUT);
    }

    Serial.begin(115200); // Para depuración
    Serial.setDebugOutput(true);

    // Inicializa I2C
    Wire.begin((uint8_t)I2C_DEV_ADDR);
    Wire.onRequest(onRequest);
    Wire.onReceive(onReceive); // Registra la función onReceive

    // Inicializa SPI
    slave.setDataMode(SPI_MODE0);
    slave.setQueueSize(QUEUE_SIZE);
    slave.begin(VSPI);

    delay(2000);
    Serial.println("Inicio del SPI esclavo");
}

void loop() {
    if (slave.hasTransactionsCompletedAndAllResultsHandled()) {
        slave.queue(NULL, rx_buf, BUFFER_SIZE);
        delay(5);
        slave.trigger();
        Serial.println("Transacción activada, esperando datos...");
    }

    if (slave.hasTransactionsCompletedAndAllResultsReady(QUEUE_SIZE)) {
        const std::vector<size_t> received_bytes = slave.numBytesReceivedAll();
        if (received_bytes[0] > 0) {
            String command = bufferToStr(rx_buf, received_bytes[0]);
            Serial.print("Datos recibidos: ");
            Serial.println(command);
            processCommand(command.c_str());
            Serial.println("Comando procesado");
        }
    }
}

void onRequest() {

}

void onReceive(int numBytes) {

}

void processCommand(const char* cmd) {

}

String bufferToStr(uint8_t* buffer, int bufferSize) {
    String result = "";
    for (int i = 0; i < bufferSize; i++) {
        result += (char)buffer[i]; // Convierte cada byte a char
    }
    return result;
}
